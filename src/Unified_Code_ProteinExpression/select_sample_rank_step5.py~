from scipy import stats


filenormal="RANK_VU_known_all30normal_Protein_Expression.txt"
filetumor="RANK_VU_known_tumor_FDRspec01_Protein_Expression.txt"
fileid="plist.txt"
fileoutput="Colorectal_expression_rank_percentile_score.txt"

fileoutputRANK="Colorectal_rank_percentile_score.txt"



#normalrank=open("RANK_Tumor_ovarian_PNNL_knownDB_FDRspec01_Protein_Expression.txt","r")

#tumorrank=open("RANK_Tumor_ovarian_JHU_knownDB_FDRspec01_Protein_Expression.txt","r")

#plist=open("ovarian.plist.txt","r")

#outfile=open("Ovarian_expression_rank_score.txt","w")


normalrank=open(filenormal,"r")

tumorrank=open(filetumor,"r")


plist=open(fileid,"r")


outfile=open(fileoutput,"w")


protein=[]
for line in plist:
    line=line.strip().split("\t")
    protein.append(line[0])





def get_sample_name_list(rankfilepointer):
    nlist=[]
    for i,line in enumerate(rankfilepointer):
        line=line.strip().split("\t")
        if i==0:
            nlist=line[1:]
            break
    return nlist
    
    
    
headlistnormal=get_sample_name_list(normalrank)    
headlisttumor=get_sample_name_list(tumorrank)    


def get_reciprocal_of_mean_reciprocal_rank_score(rankfilepointer,protein):
    protein_dic={}
    for i,line in enumerate(rankfilepointer):
        line=line.strip().split("\t")
        if i==0:
            continue

        if line[0] in protein:
            rcv=0.0
            size=len(line[1:])
            for word in line[1:]:
                word=float(word)
                if word==0:
                    size=size-1
                else:
                    rcv+=1.0/word
            if size<=0:
                rcv=0
            else:
                rcv=rcv/size
                rcv=1/rcv
            protein_dic[line[0]]={'list':line[1:],'score':rcv}
    return protein_dic



protein_dic_normal=get_reciprocal_of_mean_reciprocal_rank_score(normalrank,protein)
protein_dic_tumor=get_reciprocal_of_mean_reciprocal_rank_score(tumorrank,protein)



def get_all_score_reciprocal_of_mean_reciprocal_rank_score(rankfilepointer):
    scorelist=[]
    for i,line in enumerate(rankfilepointer):
        line=line.strip().split("\t")
        if i==0:
            continue

        rcv=0.0
        size=len(line[1:])
        for word in line[1:]:
            word=float(word)
            if word==0:
                size=size-1
            else:
                rcv+=1.0/word
        if size<=0:
            rcv=0
        else:
            rcv=rcv/size
            rcv=1/rcv
            scorelist.append(rcv)
    return scorelist



normalrank=open(filenormal,"r")

tumorrank=open(filetumor,"r")

    
nscorelist=get_all_score_reciprocal_of_mean_reciprocal_rank_score(normalrank)
tscorelist=get_all_score_reciprocal_of_mean_reciprocal_rank_score(tumorrank)


outfile.write("UNI_ID\t")
for sample in headlistnormal:
    outfile.write("%s\t" %(sample)) 
outfile.write("Average_reciprocal_rank_normal_sample\t")
for sample in headlisttumor:
    outfile.write("%s\t" %(sample)) 
outfile.write("Average_reciprocal_rank_tumor_sample\tUP_Regulation_in_Tumor\n")
normalempty=["NA"]*30
tumorempty=["NA"]*95


p_dic_percentile={}



for prot in protein:
    outfile.write("%s\t" %(prot))
    if protein_dic_normal.has_key(prot):
        normallist=protein_dic_normal[prot]['list']
        nscore=protein_dic_normal[prot]['score']
    else:
        normallist=normalempty
        nscore=0.0

    for rank in normallist:
        outfile.write("%s\t" %(rank)) 
    outfile.write("%f\t" %(nscore))


    if protein_dic_tumor.has_key(prot): 
        tumorlist=protein_dic_tumor[prot]['list']
        tscore=protein_dic_tumor[prot]['score']
    else: 
        tumorlist=tumorempty
        tscore=0.0

    for rank in tumorlist:
        outfile.write("%s\t" %(rank))
    if tscore>0.0: 
        outfile.write("%f\t%f\n" %(tscore,nscore/tscore))
    else:
        outfile.write("%f\t%f\n" %(tscore,tscore))

    p_dic_percentile[prot]={'tumor':tscore,'normal':nscore}

 
#percentile_difference=[(actual value - ref. value) / ref. value] x 100

rankf=open(fileoutputRANK,"w")
rankf.write("UniprotID\tTumor_rank_percentile\tNormal_rank_percentile\tPercentile_differences[tumor-normal](most negative is the best candidate)\n")
for prot in p_dic_percentile:
    tscore=stats.percentileofscore(tscorelist,p_dic_percentile[prot]['tumor'])
    nscore=stats.percentileofscore(nscorelist,p_dic_percentile[prot]['normal'])
    percentile_difference=tscore - nscore
    rankf.write("%s\t%f\t%f\t%f\n" %(prot,tscore,nscore,percentile_difference))




