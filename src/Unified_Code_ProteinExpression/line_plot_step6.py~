"""
Demo of a simple plot with a custom dashed line.

A Line object's ``set_dashes`` method allows you to specify dashes with
a series of on/off lengths (in points).
"""
import matplotlib.pyplot as plt
import math
import numpy as np

psk=open("PSK_Tumor_ovarian_PNNL_knownDB_FDRspec01_Protein_Expression.txt","r")
rank=open("RANK_Tumor_ovarian_PNNL_knownDB_FDRspec01_Protein_Expression.txt","r")
#psk=open("PSK_Tumor_ovarian_JHU_knownDB_FDRspec01_Protein_Expression.txt","r")
#rank=open("RANK_Tumor_ovarian_JHU_knownDB_FDRspec01_Protein_Expression.txt","r")

def zero_to_nan(values):
    """Replace every 0 with 'nan' and return a copy."""
    return [float('nan') if x==0 else x for x in values]



def read_data_to_sample_dic(filepointer,transform=True):
    sample_dic={}
    name_dic={}

    for i,line in enumerate(filepointer):
        line=line.strip().split("\t")
        if i==0:
            for j,word in enumerate(line): 
                if j<1:
                    continue
                exp_dic={}
              
                sample_dic[word]=exp_dic
                name_dic[j-1]=word
            #print(line)
            #print(sum_dic)  
            continue

        for j,word in enumerate(line[1:]):
            word=float(word)
            if word!=0 and transform==True:
                #sample_dic[name_dic[j]][i]=np.log10(word)
                sample_dic[name_dic[j]][i]=word
            else:
                sample_dic[name_dic[j]][i]=word

    return sample_dic

psk_data_dic=read_data_to_sample_dic(psk)
rank_data_dic=read_data_to_sample_dic(rank,False)


#outfiler=open("PSK_Tumor_log_R.txt","w")
#outfilep=open("PSK_Tumor_log_P.txt","w")

i=0
'''
rank_bin={}

for sample in psk_data_dic:
    pskdatainput=psk_data_dic[sample]
    rankdatainput=rank_data_dic[sample]
    r=rankdatainput.values()
    p=pskdatainput.values()
    
    u=max(r)
    l=min(r)
    
    count=0
    i=l
    step=1000
    while i<u:
        nexti=i+step
        if count in rank_bin:
            rank_bin[count]=rank_bin[count]+[j for c,j in enumerate(p) if r[c]>=i and r[c]<nexti and j!=0]
        else:
            rank_bin[count]=[j for c,j in enumerate(p) if r[c]>=i and r[c]<nexti and j!=0]

        count=count+1
        i=nexti

plt.boxplot(rank_bin.values())


''' 
# dot plot from 20 samples 
for sample in psk_data_dic:
    pskdatainput=psk_data_dic[sample]
    rankdatainput=rank_data_dic[sample]
    r=rankdatainput.values()
    p=pskdatainput.values()
    p=zero_to_nan(p)
    r=zero_to_nan(r)
    #p=sorted(p,reverse=True)
    #r=sorted(r)
#    outfiler.write("%s\n" %(sample))
#   for item in r:
#        outfiler.write("%s\n" %(item))
#    outfilep.write("%s\n" %(sample))
#    for item in p:
#        outfilep.write("%s\n" %(item))
#    break
    
    plt.plot(r, p, '.')
    #i+=1
        
plt.show()

'''

import matplotlib.pyplot as plt
radius = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
area = [3.14159, 12.56636, 28.27431, 50.26544, 78.53975, 113.09724]
square = [1.0, 4.0, 9.0, 16.0, 25.0, 36.0]
plt.plot(radius, area, label='Circle')
plt.plot(radius, square, marker='o', linestyle='--', color='r', label='Square')
plt.xlabel('Radius/Side')
plt.ylabel('Area')
plt.title('Area of Shapes')
plt.legend()
plt.show()
'''
#dashes = [10, 5, 100, 5]  # 10 points on, 5 off, 100 on, 5 off
#line.set_dashes(dashes)


